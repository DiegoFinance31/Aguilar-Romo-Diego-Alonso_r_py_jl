
# Para instalar el comando weightedcalcs: 

#!pip install weightedcalcs

# Para importar las librerías que vamos a usar: 

import os   # for usernanme y set direcotrio
import pandas as pd
import numpy as np
from tqdm import tqdm  # controlar el tiempo en un loop


user = os.getlogin()

os.chdir(f"C:/Users/diego/OneDrive/Desktop/PARCIAL MADATA/enahodf") # Set directorio


" AÑO 2020"

enaho_2020 = pd.read_stata(r"C:/Users/diego/OneDrive/Desktop/PARCIAL MADATA/enahodf/datos/2020/737-Modulo01/737-Modulo01/enaho01-2020-100.dta")

enaho01 = pd.read_stata(r"C:/Users/diego/OneDrive/Desktop/PARCIAL MADATA/enahodf/datos/2020/737-Modulo01/737-Modulo01/enaho01-2020-100.dta",
                           convert_categoricals=False)

labels01 = pd.read_stata(r"C:/Users/diego/OneDrive/Desktop/PARCIAL MADATA/enahodf/datos/2020/737-Modulo01/737-Modulo01/enaho01-2020-100.dta",
                           convert_categoricals=False, iterator=True)
                           
labels01.variable_labels()

labels01.value_labels().keys()

labels01.value_labels()['p110']

"Modulo 34 Sumaria 2020"

enaho34 = pd.read_stata(r"C:/Users/diego/OneDrive/Desktop/PARCIAL MADATA/enahodf/datos/2020/737-Modulo34/737-Modulo34/sumaria-2020.dta",
                           convert_categoricals=False)

labels34 = pd.read_stata(r"C:/Users/diego/OneDrive/Desktop/PARCIAL MADATA/enahodf/datos/2020/737-Modulo34/737-Modulo34/sumaria-2020.dta",
                           convert_categoricals=False, iterator=True)

labels34.variable_labels()

"Merge 01 + 34"


num = ["34"]

merge_hog2020 = enaho01

for i in tqdm(num):
    merge_hog2020 = pd.merge(merge_hog2020, globals()[f'enaho{i}'], 
                         on = ["conglome", "vivienda", "hogar"],
                       how = "left", 
                       suffixes=('', '_y'),
                       validate = "1:1")
"AÑO 2019"
    
    

# Para abrir una base que está en Stata en Python: 


enaho0119 = pd.read_stata(r"C:/Users/diego/OneDrive/Desktop/PARCIAL MADATA/enahodf/datos/2019/687-Modulo01/687-Modulo01/enaho01-2019-100.dta",
                           convert_categoricals=False)

labels0119 = pd.read_stata(r"C:/Users/diego/OneDrive/Desktop/PARCIAL MADATA/enahodf/datos/2019/687-Modulo01/687-Modulo01/enaho01-2019-100.dta",
                           convert_categoricals=False, iterator=True)
labels0119.variable_labels()

labels0119.value_labels().keys()

labels0119.value_labels()['p110']

"Modulo 34 sumaria 2019"

# Para abrir una base que está en Stata en Python: 

enaho3419 = pd.read_stata(r"C:/Users/diego/OneDrive/Desktop/PARCIAL MADATA/enahodf/datos/2019/687-Modulo34/687-Modulo34/sumaria-2019.dta",
                           convert_categoricals=False)

labels3419 = pd.read_stata(r"C:/Users/diego/OneDrive/Desktop/PARCIAL MADATA/enahodf/datos/2019/687-Modulo34/687-Modulo34/sumaria-2019.dta",
                           convert_categoricals=False, iterator=True)

labels3419.variable_labels()

num = ["34"]

merge_hog2019 = enaho0119
for i in tqdm(num):
    merge_hog2019 = pd.merge(merge_hog2019, globals()[f'enaho{i}'], 
                         on = ["conglome", "vivienda", "hogar"],
                       how = "left", 
                       suffixes=('', '_y'),
                       validate = "1:1")
    
"Append"
    
merge_append = merge_hog2020.append(merge_hog2019, ignore_index = True)



"INGRESO Y GASTO MENNSUAL"

merge_append["ingreso_month"] = merge_append["inghog1d"]/(12*merge_append["mieperho"])

merge_append["gasto_month"]  = merge_append["gashog2d"]/(12*merge_append["mieperho"])

"DEFLACTOR ESPACIAL Y TEMPORAL"

"ESPACIAL"
merge_append["gasto_month_defl"]  = merge_append["gasto_month"]*(merge_append["ld"])

"TEMPORAL"

deflactor = pd.read_stata(r"C:/Users/diego/OneDrive/Desktop/PARCIAL MADATA/enahodf/datos/2020/737-Modulo34/737-Modulo34/Gasto2020/Bases/deflactores_base2020_new.dta",
                           convert_categoricals=False)
num = ["34"]

merge_base = merge_append

merge_append['dpto'] = merge_append.ubigeo.str.slice(0,2)

merge_append['aniorec'] = merge_append['aÑo']

merge_append['dpto']=merge_append['dpto'].astype(int)
merge_append['aniorec']=merge_append['aniorec'].astype(int)
merge_append = merge_append.merge(deflactor, how='inner', on=None, left_on=['dpto', 'aniorec'], right_on=['dpto', 'aniorec'], left_index=False, right_index=False, sort=False, suffixes=('_x', '_y'), copy=True, indicator=False, validate=None)

"DIVIDA POR mieperho, 12, LD e i00"

merge_append["ingreso_month_def"] = merge_append["ingreso_month"]/(merge_append["mieperho"])
merge_append["ingreso_month_def2"] = merge_append["ingreso_month"]/12
merge_append["ingreso_month_def3"] = merge_append["ingreso_month"]/(merge_append["ld"])
merge_append["ingreso_month_def4"] = merge_append["ingreso_month"]/(merge_append["i00"])

merge_append["gasto_month_def"] = merge_append["gasto_month"]/(merge_append["mieperho"])
merge_append["gasto_month_def2"] = merge_append["gasto_month"]/12
merge_append["gasto_month_def3"] = merge_append["gasto_month"]/(merge_append["ld"])
merge_append["gasto_month_def4"] = merge_append["gasto_month"]/(merge_append["i00"])

print(merge_append)



########################################################


#!/usr/bin/env python
# coding: utf-8

# In[7]:


#Primero importamos las librerías con la que vamos a trabajar: 

import pandas as pd
import numpy as np


# In[8]:


#Es preciso mencionar que la base de datos con la que vamos a trabajar 
#es el módulo de empleo(modulo05,enaho01a-2020-500):

#Dato que el archivo de la base de datos se nos presenta en formato stata, 
#tendremos que utilizar el comando pd.read_stata para que python pueda leer dicha base de datos: 

enahomódulo05_2020 = pd.read_stata(r"/Users/diegoyeliseo/Desktop/Archivo Stata Ejercicio Salario/enaho01a-2020-500.dta",
                             convert_categoricals=False) 
                    

print (enahomódulo05_2020.dtypes)

# Para poder mostrar la base de datos: 

enahomódulo05_2020


# In[9]:


#Es preciso mencionar, que como nota nos indica de que debemos filtrar la base de datos con las variables
#que necesitará para que sus programas no vuelvan lentos por lo pesado de los datos. En este sentido,
#para quedarnos con las variables a utilizar, escribimos el siguiente código: 

#Cabe mencionar, que las variables que aparecen entre corchetes están ordenadas de izquierda a derecha:

enahomódulo05_2020 = enahomódulo05_2020[["aÑo", "mes", "conglome", "vivienda", "hogar" , 
                  "ubigeo", "dominio" ,"estrato", "i524e1", "i538e1", "i513t", "i518"]] 

#Para mostrar la base de datos: 

enahomódulo05_2020


# In[16]:


#El primer paso para calcular el salario por hora es reemplazar por 0 todos los NA o missing en las variables relevantes
#que ya fueron mencionadas anteriormente. Para lograr ello, utilizamos los siguientes códigos: 

#Estas son las 4 variables que son como insumos para calcular el salario por hora: 

enahomódulo05_2020["i524e1"].replace({np.nan: 0},inplace =True)
enahomódulo05_2020["i538e1"].replace({np.nan: 0},inplace =True)
enahomódulo05_2020["i513t"].replace({np.nan: 0},inplace =True)
enahomódulo05_2020["i518"].replace({np.nan: 0},inplace =True)


# In[14]:


#El segundo paso para calcular el salario por hora, es realizar los cálculos respectivos: 

#Según los datos del problema, salario por hora del trabajador dependiente: suma de i524e1 i538e1/ ( ( suma i513t i518)*52)
#En este sentido apuntamos a lograr dicho cálculo: 

#Por ello, en primera instancia vamos a crear una variable llamada ingreso_anual_principal_segundoempleo
#que sea la suma de las variables i524e1 y i538e1:

enahomódulo05_2020['ingreso_anual_principal_segundoempleo'] = enahomódulo05_2020["i524e1"] + enahomódulo05_2020["i538e1"]

#En segunda instancia, vamos a crear una variable llamada cantidad_horastrabajadas_principal_segundoempleo
#que sea la suma de las variables i513t y i518: 

enahomódulo05_2020['cantidad_horastrabajadas_principal_segundoempleo'] = enahomódulo05_2020["i513t"] + enahomódulo05_2020["i518"]

#De esta manera, ya podemos pasar a resolver el cálculo deseado que era el siguiente: 

#suma de i524e1 i538e1/ ( ( suma i513t i518)*52)

#Entonces, vamos a reemplazar la suma de i524e1 i538e1 por ingreso_anual_principal_segundoempleo
#y vamos a reemplazar la suma i513t i518 por cantidad_horastrabajadas_principal_segundoempleo: 

enahomódulo05_2020['salarioporhora'] = enahomódulo05_2020['ingreso_anual_principal_segundoempleo'] / (enahomódulo05_2020['cantidad_horastrabajadas_principal_segundoempleo']*52)


# In[15]:


#El último paso para calcular el salario por hora, es que si un salario por hora resulta 0, hay que convertirlo a missing: 

enahomódulo05_2020['salarioporhora'].replace({0: np.nan}, inplace =True)

print(enahomódulo05_2020['salarioporhora'].value_counts())




#######################################################

#!/usr/bin/env python
# coding: utf-8

# In[125]:


#En primer lugar, en términos generales, el programa pensión 65 se focaliza en hogares pobres 
#con algún miembro del hogar mayor a 65 años. Usted debe crear una dummy si el hogar cumple 
#tales características. Para ello use el módulo 2 (características de los miembros del hogar).

#Primero, aplique groupby , luego realice un merge con el módulo 34, y finalmente, debe crear la variable dummy.


# In[126]:


#Primero importamos las librerías con la que vamos a trabajar: 

import pandas as pd
import numpy as np


# In[127]:


#Dado que nuestra base de datos está en formato stata, para poder trabajarla en python tenemos que
#utilizar el comando pd.read_stata

enahomódulo02_2020 = pd.read_stata(r"/Users/diegoyeliseo/Desktop/Archivos Stata Ejercicio Groupby/enaho01-2020-200.dta",
                           convert_categoricals=False) 

#Para mostrar la base de datos ponemos: 

enahomódulo02_2020


# In[128]:


# En primera instancia, vamos a aplicar groupby a hogares:

#Para ello, vamos a denotar una nueva variable llamada pensión65. Además de ello, generamos la variable de miembros_totales y la edad máxima: 

pensión65= enahomódulo02_2020.groupby( [ "conglome", "vivienda", "hogar" ],
                                      as_index = False ).agg(
                                      miembros_totales = ('conglome', np.size), 
                                      edad = ('p208a', np.max))


# In[129]:


#Dado que nuestra segunda base de datos también está en formato stata, tenemos que utilizar el comando pd.read_stata para poder trabajar en python: 

enahomódulo34_2020 = pd.read_stata(r"/Users/diegoyeliseo/Desktop/Archivos Stata Ejercicio Groupby/sumaria-2020.dta",
                           convert_categoricals=False) 


#Para mostrar la base de datos ponemos: 

enahomódulo34_2020


# In[130]:


# En segunda instancia, se realizará un merge del módulo 2(características de los miembros del hogar) con el módulo 34.
#En este sentido, vamos a realizar un merge entre pensión65 y enahomódulo34_2020:

#Vamos a establecer una nueva variable llamada pensión65_1 que va a ser el merge entre ambas bases de datos:

pensión65_1 = pd.merge(pensión65,enahomódulo34_2020 , 
                     on = ["conglome","vivienda","hogar"],
                       how = "left", 
                       suffixes=('', '_y'),
                       validate = "m:1") 


# In[131]:


# Por lo mencionado en la nota, vamos a filtrar la base de datos con las variables que se necesitarán
#para que los programas no sean lentos:

#Todas las variables en corchete son mis variables relevantes con las que voy a trabajar: 

pensión65_1 = pensión65_1[["aÑo","conglome", "vivienda", "hogar" , 
                  "ubigeo", "dominio" ,"estrato" , "inghog1d",
                  "gashog2d", "mieperho", "linea", "edad", "miembros_totales"]]


# In[132]:


#Por último vamos a crear la variable dummy:

#En este sentido, empezamos creando el ingreso y gasto mensual de los hogares:

# Para ingreso mensual, el cálculo a realizar es el siguiente:

pensión65_1["ingreso_del_mes"]=pensión65_1["inghog1d"]/(12*pensión65_1["mieperho"])

# Para gasto mensual, el cálculo a realizar es el siguiente:

pensión65_1["gasto_del_mes"]=pensión65_1["gashog2d"]/(12*pensión65_1["mieperho"])


# In[133]:


# Por último, vamos a generar las variables dummies:

# Es relevante mencionar que en términos generales, el programa pensión 65 
# se focaliza en hogares pobres con algún miembro del hogar mayor a 65 años.

# En primera instancia, la primera dummy que vamos a generar es 
# si el hogar es pobre le ponemos 1 y si el hogar no es pobre le ponemos 0

# Vamos a crear una variable llamada hogar_pobre que va a ser igual a 1 si es que la variable gasto_del_mes 
# es menor a la línea de pobreza, y es igual a 0 si la variable gasto_del_mes es mayor a la línea de pobreza.

pensión65_1["hogar_pobre"]=np.where(pensión65_1["gasto_del_mes"]<pensión65_1["linea"],1,0)


# En segunda instancia, generamos la dummy si hay algún miembro del hogar que sea mayor de 65 años
# le ponemos 1, y si es menor de 65 años le ponemos 0

#Vamos a crear una variable llamada miembrodelhogar_supera_los_65años que va a ser igual a 1 si es que la variable edad es mayor 
# a 65 años y es igual a 0 si es menor a 65 años. 

pensión65_1["miembrodelhogar_supera_los_65años"]=np.where(pensión65_1["edad"]> 65,1,0)

# En tercera instancia, generamos la dummy de si se cumple las condiciones de Pensión 65 le ponemos 1
# y si no se cumple las condiciones le ponemos 0

#Vamos a crear una variable llamada formaparte_de_pension65  que va a ser igual 
# a 1 si se cumple que el hogar sea pobre y que cuente con algún miembro que sea mayor a 65 años,
# y le pondremos 0 para el caso contrario. 


pensión65_1["formaparte_de_pension65"]=np.where((pensión65_1["hogar_pobre"] == 1) & (pensión65_1["miembrodelhogar_supera_los_65años"] == 1),1,0)


# In[134]:


# A modo de ver si los cambios se han realizado en la base de datos, pongamos lo siguiente:

pensión65_1

